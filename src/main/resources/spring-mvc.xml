<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd
                        http://www.springframework.org/schema/mvc
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">
    <!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
    <!--<context:component-scan base-package="com.springmvc.controller" />-->





    <mvc:annotation-driven />
    <!-- 扫描web包，应用Spring的注解   扫描所有的controller 但是不扫描service-->
    <!--<context:component-scan base-package="com.springmvc">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/>
    </context:component-scan>-->
    <context:component-scan base-package="com.springmvc.controller"/>



    <bean id="swagger" class="com.springmvc.commons.config.SwaggerConfiguration"/>

    <!--避免IE执行AJAX时，返回JSON出现下载文件 -->
    <bean id="mappingJacksonHttpMessageConverter"
          class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/html;charset=UTF-8</value>
            </list>
        </property>
    </bean>
    <!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->
    <bean
            class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <property name="messageConverters">
            <list>
                <ref bean="mappingJacksonHttpMessageConverter"/>   <!-- JSON转换器 -->
            </list>
        </property>
    </bean>
    <!-- 定义跳转的文件的前后缀 ，视图模式配置-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 默认编码 -->
        <property name="defaultEncoding" value="utf-8"/>
        <!-- 文件大小最大值 -->
        <property name="maxUploadSize" value="10485760000"/>
        <!-- 内存中的最大值 -->
        <property name="maxInMemorySize" value="40960"/>
    </bean>

    <!-- 配置Spring国际化信息  -->
    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basenames">
            <list>
                <value>messages.messages</value>
                <value>messages.validationMessages.administration</value>
                <value>messages.validationMessages.common_platform</value>
                <value>messages.validationMessages.coordination</value>
                <value>messages.validationMessages.files</value>
                <value>messages.validationMessages.personalOffice</value>
                <value>messages.validationMessages.personnel</value>
                <value>messages.validationMessages.system</value>
                <value>messages.validationMessages.workFlow</value>
            </list>
        </property>
    </bean>
    <bean id="CookieLocaleResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver">
        <property name="cookieMaxAge" value="604800"/>
        <property name="defaultLocale" value="zh_CN"/>
        <property name="cookieName" value="language"/>
    </bean>
    <!--spring 国际化消息 end-->


    <!--拦截器-->
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <!--<mvc:exclude-mapping path="/**/fonts/*"/>-->
            <bean class="com.springmvc.commons.interceptor.LoginInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>
    <!--拦截器 end-->

    <bean id="myActionException" class="com.springmvc.commons.exception.MyActionException"/>

    <!-- 支持Shiro对Controller的方法级AOP安全控制 begin-->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
        <property name="proxyTargetClass" value="true" />
    </bean>


    <!--  validator 校验 JSR-303验证框架   ConversionService 在使用 mvc:annotation-driven 会 自动注册-->
    <!--<bean id="validator"  class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        &lt;!&ndash; 采用 Hibernate validator &ndash;&gt;
        &lt;!&ndash;<property name="providerClass"  value="org.hibernate.validator.HibernateValidator"/>&ndash;&gt;
        &lt;!&ndash; 如果不加默认到 使用classpath下的 ValidationMessages.properties &ndash;&gt;
        <property name="validationMessageSource" ref="messageSource"/>

    </bean>

    &lt;!&ndash; 添加注解驱动   注入validator 校验&ndash;&gt;
    <mvc:annotation-driven conversion-service="conversionService" validator="validator" />
    &lt;!&ndash; Spring MVC 数据格式化  &ndash;&gt;
    <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <property name="converters">
            <list>
                <bean class="com.springmvc.commons.converter.StringToDateConverter" />
                <bean class="com.springmvc.commons.converter.StringToTimestampConverter" />
                <bean class="com.springmvc.commons.converter.StringToStringConverter" />
            </list>
        </property>
    </bean>-->


    <!-- 处理请求返回json字符串的中文乱码问题 -->
    <mvc:annotation-driven>
        <mvc:message-converters>
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>application/json;charset=UTF-8</value>
                    </list>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

</beans>